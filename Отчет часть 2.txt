1. Постановка задачи:
Для программы, вычисляющей процентное соотношение размеров файлов и папок в директории написать графический интерфейс, позволяющий
выбирать способ группировки (по папкам/по файлам).
2. Предлагаемое решение:
Для решения данной задачи была выбрана архитектура MVC (Model - view - controller) Модель - представление - контроллер
Модель предоставляет данные и реагирует на команды контроллера, изменяя данные
Представление отвечает за отображение данных модели на форме и реагирует на изменение данных в модели
Контроллер обрабатывает действия пользователя и оповещает модель и представление.

Плюс данного подхода заключается в отделении бизнес-логики от её визуалализации. 
Такой подход также позволяет привязать одну модель к разным отображениям (список, таблица)

В Qt уже реализованы основные механизмы для использования архитектуры MVC. 
Модели базируются на классе QAbstractListModel и его наследниках (FyleSystemModel,AbstractTableModel, и тд)
Так же в qt есть уже готовые представления для моделей, например QListView(Список)

Так же предлагается применить паттерн Singletone к классу-калькулятору (SizeCalculator). Класс - калькулятор предоставляет услугу в виде подсчета данных, и для его 
использования необходимо иметь готовый объект класса или указатель на объект класса, т.е. для его использования другие классы должны иметь либо указатель либо переменную типа SizeCalculator
Применение же паттерна Singletone облегчит доступ к калькулятору, предоставив глобальную точку доступа для функции подсчета данных, обеспечит статическое время жизни ( в течении работы программы)
Это удобно, потому что одни классы только меняют стратегию подсчета, другие используют только функцию подсчета. Паттерн позволит избавиться от лишних зависимостей.

3. Шаги реализции.
Для реализации данной задачи был разработан список классов.
а) Наследник QAbstractItemModel FyleExplorerModel - модель данных
Содержит в себе член-данное m_data, содержащее результат работы класса-калькулятора и
QString lastPath - последняя выбранная директория.
Были переопределены следующие виртуальные функции QAbstractItemModel (см. .cpp файл)
int rowCount(const QModelIndex &parent)
int columnCount(const QModelIndex &parent)
QVariant data(const QModelIndex &index, int role)
QVariant headerData(int section, Qt::Orientation orientation, int role)
QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex())
QModelIndex parent(const QModelIndex &child)
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole)
Qt::ItemFlags flags(const QModelIndex &index)
bool hasChildren(const QModelIndex &parent)
И дополнительно добавлены 2 функции для обновления модели
void update(QString path);
void update(QString)

б) Класс главного окна MainWindow
Содержит в себе объекты меню, видов и моделей.
так же содержит объекты конкретных стратегий и следующие слоты для взаимодействия пользователя (см. .cpp файл)
void onFileStrategyClick();
void onFolderStrategyClick();

void onlistViewClick();
void onCircleChartViewClick();
void onBarChartViewClick();

void onSelectionChangedSlot(const QItemSelection &selected, const QItemSelection &deselected);

в)Применен паттерн Singletone к классу-калькулятору.
-Добавлен метод getInstance()
-добавлено статическое поле-указатель
-запрещено копирование и конструктор

4. Тестирование 
Программа протестирована с файлами из части 1. Все тесты прошли успешно. 
Т.к. на данном этапе реализации происходит контроль ввода пользователя (пользователь выбирает директорию с помощью treeView) то большинство исключений теряют смысл, тк
проверяют существование папки и корректность пути. Здесь же путь составляется с помощью индексов FileSystemModel и treeView, поэтому он не может быть неправильным.